name: build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  android:
    runs-on: ubuntu-latest

    env:
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Find the ZIP (repo root) and unzip it to ./project
      - name: Locate ZIP (repo root)
        id: zip
        run: |
          set -e
          ZIP=$(ls -1 *.zip 2>/dev/null | head -n1 || true)
          if [ -z "$ZIP" ]; then
            echo "No .zip file found in repo root"; exit 1
          fi
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          echo "Found ZIP: $ZIP"

      - name: Unzip project
        run: |
          rm -rf project
          unzip -q "${{ steps.zip.outputs.zip }}" -d project
          echo "Unzipped to ./project"
          ls -la project || true

      # 2) Detect Gradle project root inside ./project
      - name: Detect Gradle project root
        id: gradleroot
        run: |
          set -e
          cd project
          ROOT=$(find . -maxdepth 3 -type f \( -name "settings.gradle" -o -name "settings.gradle.kts" -o -name "build.gradle" -o -name "build.gradle.kts" \) -print -quit | xargs -r dirname)
          if [ -z "$ROOT" ]; then
            echo "Could not find a Gradle project (settings.gradle/build.gradle)"; exit 1
          fi
          echo "dir=$PWD/$ROOT" >> "$GITHUB_OUTPUT"
          echo "Gradle root: $PWD/$ROOT"

      # 3) JDK + Gradle (system)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3

      # 4) Android SDK + required components
      - name: Set up Android SDK
        run: |
          sudo mkdir -p "$ANDROID_SDK_ROOT"
          yes | sudo /usr/local/lib/android/sdkmanager --licenses >/dev/null 2>&1 || true
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # 5) Build with **system Gradle** (never uses ./gradlew)
      - name: Build Debug APK (system Gradle)
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        run: |
          echo "Gradle version:"
          gradle --version

          # Try :app first if present; otherwise run from root
          if gradle -q :app:tasks --all >/dev/null 2>&1; then
            gradle :app:assembleDebug
          else
            gradle assembleDebug
          fi

      # 6) Upload APK/AAB
      - name: Upload Debug APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            **/build/outputs/apk/debug/*.apk
            **/build/outputs/bundle/debug/*.aab
          if-no-files-found: warn
