name: Android CI (APK)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # --- Checkout repo ---
      - name: Checkout
        uses: actions/checkout@v4

      # --- Find the ZIP in repo root (or set ZIP_NAME env to force) ---
      - name: Locate ZIP (repo root)
        id: findzip
        shell: bash
        run: |
          set -e
          ZIP_OVERRIDE="${ZIP_NAME:-}"
          if [[ -n "$ZIP_OVERRIDE" && -f "$ZIP_OVERRIDE" ]]; then
            echo "zip=$ZIP_OVERRIDE" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Find exactly one .zip file in repo root
          mapfile -t zips < <(find . -maxdepth 1 -type f -name "*.zip" -printf "%P\n")
          if [[ ${#zips[@]} -eq 0 ]]; then
            echo "No ZIP found in repository root." >&2
            exit 1
          elif [[ ${#zips[@]} -gt 1 ]]; then
            echo "Multiple ZIPs found in repository root: ${zips[*]}  Set ZIP_NAME env to choose." >&2
            exit 1
          fi
          echo "zip=${zips[0]}" >> "$GITHUB_OUTPUT"
          echo "Using ZIP: ${zips[0]}"

      # --- Unzip into ./project ---
      - name: Unzip project
        id: unzip
        shell: bash
        run: |
          set -e
          rm -rf project
          mkdir -p project
          unzip -q "${{ steps.findzip.outputs.zip }}" -d project
          echo "unzipped=project" >> "$GITHUB_OUTPUT"

      # --- Detect Gradle project root (folder with settings.gradle[.kts]) ---
      - name: Detect Gradle project root
        id: findroot
        shell: bash
        run: |
          set -e
          ROOT=$(dirname "$(grep -Rsl --include="settings.gradle" --include="settings.gradle.kts" ./${{ steps.unzip.outputs.unzipped }} || true | head -n1)")
          if [[ -z "$ROOT" ]]; then
            echo "Could not find settings.gradle/settings.gradle.kts in unzipped content." >&2
            echo "Checked under ${{ steps.unzip.outputs.unzipped }}"
            exit 1
          fi
          echo "root=$ROOT" >> "$GITHUB_OUTPUT"
          echo "Detected Gradle root: $ROOT"
          ls -la "$ROOT"

      # --- JDK 17 (AGP 8.x compatible) ---
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # --- Android SDK & tools ---
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android platforms & build-tools
        shell: bash
        run: |
          set -e
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" \
                     "platforms;android-34" \
                     "build-tools;34.0.0"

      # --- Gradle cache (optional but speeds builds) ---
      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # --- Make gradlew & wrapper readable/executable (fix for exit 126) ---
      - name: Fix gradlew + wrapper permissions
        shell: bash
        run: |
          set -e
          ROOT="${{ steps.findroot.outputs.root }}"
          if [[ -f "$ROOT/gradlew" ]]; then
            chmod +x "$ROOT/gradlew"
          fi
          if [[ -d "$ROOT/gradle/wrapper" ]]; then
            chmod -R 755 "$ROOT/gradle/wrapper"
          fi
          # Also ensure wrapper JAR is readable
          if [[ -f "$ROOT/gradle/wrapper/gradle-wrapper.jar" ]]; then
            chmod 644 "$ROOT/gradle/wrapper/gradle-wrapper.jar"
          fi

      # --- Build APK (prefer wrapper; fallback to system gradle) ---
      - name: Build Debug APK
        shell: bash
        run: |
          set -e
          cd "${{ steps.findroot.outputs.root }}"
          if [[ -x "./gradlew" ]]; then
            ./gradlew --no-daemon assembleDebug --stacktrace
          else
            gradle --no-daemon assembleDebug --stacktrace
          fi

      # --- Upload APK artifact(s) ---
      - name: Upload Debug APK(s)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: |
            ${{ steps.findroot.outputs.root }}/**/build/outputs/apk/debug/*.apk
          if-no-files-found: warn
