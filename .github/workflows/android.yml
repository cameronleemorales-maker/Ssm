name: Android CI

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Locate the ZIP in the repo root ---
      - name: Verify ZIP exists
        id: findzip
        shell: bash
        run: |
          shopt -s nullglob
          zips=(*.zip)
          if [ ${#zips[@]} -eq 0 ]; then
            echo "No .zip found in repo root."
            ls -la
            exit 1
          fi
          echo "zip=${zips[0]}" >> "$GITHUB_OUTPUT"
          echo "Found ZIP: ${zips[0]}"

      # --- Unzip into ./project ---
      - name: Unzip project
        shell: bash
        run: |
          rm -rf project
          unzip -q "${{ steps.findzip.outputs.zip }}" -d project
          echo "Top-level of unzipped project:"
          ls -la project

      # --- Detect Gradle project root (folder with settings.gradle or build.gradle) ---
      - name: Locate Gradle project root
        id: gradleroot
        shell: bash
        run: |
          set -e
          file=$(find project -maxdepth 6 -type f \
                   \( -name "settings.gradle" -o -name "settings.gradle.kts" \
                      -o -name "build.gradle" -o -name "build.gradle.kts" \) \
                   -print -quit)
          if [ -z "$file" ]; then
            echo "Could not find a Gradle project inside the ZIP."
            ls -R project || true
            exit 1
          fi
          dir=$(dirname "$file")
          echo "dir=$dir" >> "$GITHUB_OUTPUT"
          echo "Gradle root: $dir"

      # --- Java 17 ---
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # --- Android SDK base ---
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # --- Install required platforms & build-tools safely (no Broken pipe) ---
      - name: Install Android platforms & build-tools
        shell: bash
        run: |
          set -e
          yes | sdkmanager --licenses || true
          sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      # --- Gradle cache + system Gradle fallback ---
      - name: Set up Gradle (cache & tools)
        uses: gradle/actions/setup-gradle@v3
        with:
          build-root-directory: ${{ steps.gradleroot.outputs.dir }}

      # --- Make wrapper executable if it exists ---
      - name: Fix gradlew + wrapper permissions
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        shell: bash
        run: |
          if [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            chmod +x gradle/wrapper/gradle-wrapper.properties 2>/dev/null || true
            chmod +x gradle/wrapper/gradle-wrapper.jar 2>/dev/null || true
          fi

      # --- Build Debug APK (use wrapper if present, else system Gradle) ---
      - name: Build Debug APK
        working-directory: ${{ steps.gradleroot.outputs.dir }}
        shell: bash
        run: |
          set -e
          if [ -x "./gradlew" ]; then
            echo "Using Gradle Wrapper"
            ./gradlew --no-daemon assembleDebug
          else
            echo "No wrapper found â€” using system Gradle"
            gradle --no-daemon assembleDebug
          fi

      # --- Upload generated APKs ---
      - name: Upload Debug APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks
          path: |
            ${{ steps.gradleroot.outputs.dir }}/**/build/outputs/apk/**/*.apk
          if-no-files-found: warn
